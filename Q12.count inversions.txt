#include <bits/stdc++.h>

using namespace std;
//approach 1
#include <bits/stdc++.h> 
long long getInversions(long long *arr, int n){
    // Write your code here.
    long long ans=0;
     
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
              if(arr[i] > arr[j])
              {
                  ans++;
              } 

        }
        
      
    }
    return ans;
}






//approach 2
long long merge(long long arr[], int l, int mid, int r) {
    long long inv = 0;
    int n1 = mid - l + 1; // left size
    int n2 = r - mid;     // right size
    int a[n1];
    int b[n2];
    for (int i = 0; i < n1; i++) {
        a[i] = arr[l + i];
    }
    for (int i = 0; i < n2; i++) {
        b[i] = arr[mid + 1 + i];
    }
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (a[i] <= b[j]) {
            arr[k] = a[i];
            i++;
        } else {
            arr[k] = b[j];
            inv += n1 - i;
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = a[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = b[j];
        j++;
        k++;
    }
    return inv;
}

long long ms(long long arr[], int l, int r) {
    long long inv = 0;
    if (l < r) {
      int mid = l + (r - l) / 2;
      inv += ms(arr, l, mid);       // left inversions
      inv += ms(arr, mid + 1, r);   // right inversions
      inv += merge(arr, l, mid, r); // merge and count inversions
    }
    return inv;
}
long long getInversions(long long arr[], int n) {
    return ms(arr, 0, n - 1);
}